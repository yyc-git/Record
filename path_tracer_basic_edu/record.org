* TODO prepare

# camera

# IBL

# a render lib

组织课程详细目录


* TODO cource fix

** 10:direct light sample

fix math equation:
change E->Le to E->Li






judge isHitEmitInstance and handle L_e(p', wo) when bounce === 0
(if ray hit emitted instance or miss, terminate ray)






fix L_indir:
L_indir = 
...
        if (isHitNoEmitInstance(result)) {
          f_r(p', wi, wo) * shade(P_RR, p', result.hitPosition, -wi) * cosθ / pdf(wi) / P_RR;
        }
        //miss or isHitEmitInstance
        else{
            vec3(0.0);
        }






handle specularBounce:
if(specularBounce){
    not compute L_dir
}
...

if(specularBounce){
    L_indir = 
    if(isHitEmitInstance()){
        TODO why not use f_r(p', wi, wo) * shade(P_RR, p', result.hitPosition, -wi) * cosθ / pdf(wi) / P_RR ?

        add hitInstance.Le()
    }
    ...
}


# * TODO fix wonder.js 
# ** TODO support handleMedia(refer to pbrt->integrator.cpp->EstimateDirect)


# ** TODO handle specular bounce


* cource content

# camera(fly camera)

准备开发环境

使用框架从0开发程序


数学基础铺垫（如微积分、向量、三角函数等）

光追发展历史：
...
whited
path trace


render a triangle(use webgpu api???)

计算一个像素的颜色（引入sample count）


    - 直接光源采样
    - 阴影
    - IBL
    - 加入点光源、球形光源、矩形光源
    - 多光源



fr:
uniform sample hemisphere(diffuse);


* TODO need learn when implement fr !


reflection models;
http://www.pbr-book.org/3ed-2018/Reflection_Models.html
http://www.pbr-book.org/3ed-2018/Light_Transport_I_Surface_Reflection/Sampling_Reflection_Functions.html#fragment-BxDFMethodDefinitions-13
add multiple materials for each model(four type:diffuse, glossy specular, perfect specular, and retro-reflective)
(need handle specular reflection)


# use disney BRDF to uniform the four type reflection models;
use FresnelBlend model(refer to pbrt->reflection.cpp) to combine the diffuse, gloss specular, perfect specular(how to identify? judge by metalness and roughness? α = 0 gives a perfectly specular surface (refer to https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#microfacet-surfaces)?) type reflection models;
(how to combine retro-reflective???)
use the BRDF material instead of multiple materials!
(need handle specular reflection)





metallic-roughness material:
    refer to:
    https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-b-brdf-implementation
    https://airguanz.github.io/2019/02/20/disney-brdf.html




* TODO cource catalog

** DONE 初步上手

- 课程介绍

# 回顾相关课程相关内容


# 提出问题


内容预览
（一级标题）


说明实现方式：
Javascript
基于WebGPU
使用Three.js创建场景



课程安排
每节课时间（除去问答等互动时间）在30分钟内





# 复习

# 解答问题



# 参考资料


扩展阅读

感谢



- WebGPU介绍和使用光栅化管线绘制一个三角形



- 重构和设计基本的架构

设计：
dp
gameObject, components


explain why use three.js to build scene graph?
# can use its math;
can use its loader(e.g. GLTFLoader) to load model;







- 渲染框架介绍 - 光追管线介绍
- 光追管线介绍：使用光追管线绘制一个三角形
- 3D基础介绍
坐标系变换

三角函数

向量

线性代数基础（矩阵、逆矩阵）、重心坐标、相机near、far的意义。。。。。。

- 光追管线介绍和使用光追管线绘制一个三角形

配置开发环境：
装显卡驱动



** DONE 理论准备

# - 数学基础介绍
# 微积分

# refer to:
# https://zhuanlan.zhihu.com/p/260828634 :
# Fundamentals Of Computer Graphics，计算机图形学原理 -> ->14.1

# 球面坐标系

# 立体角

- 渲染基础介绍
1.1
1.3
...

辐射度

立体角

- 渲染方程推导
(第五、七、节课)

方程推导

分析

# - 光线投射理论和实现：绘制一个三角形 
- 光线投射、Whitted光线追踪、分布式光线追踪理论和伪代码


- 暂停，研究wonder.js中迭代的实现！

迭代方程
throughput!


- 蒙特卡洛积分推导
实例代码


- 暂停：

研究下面材料，是否可以不讲"半球面随机方向生成"就先实现程序？
https://www.cnblogs.com/lv-anchoret/p/10500918.html
https://www.cnblogs.com/lv-anchoret/p/10508352.html
https://www.cnblogs.com/lv-anchoret/p/10518961.html


# 把采样、逆变换算法放到"半球面随机方向生成"中？


- 使用“逆变换算法”采样
实例代码


- 减小方差：重要性采样
实例代码

# - (暂停，为什么需要基于面积的积分形式？复习pbrt中矩形光源的实现！)




- 暂停
（给出所有的伪代码） 包括迭代

（实现第三部分所有课程的代码！）(compute pipeline)




# - 路径追踪理论和伪代码
# 第四、六、九（和分布式光线追踪对比）节课

# refer to lecture 16

# (
# 除了像素发送N条射线（改进1），还使用M帧来累加求平均值（.rgen就不再求平均值了！）（改进2）！
# )



# -路径追踪对应的渲染方程变换
# 第九节课（去掉面积积分形式，只要路径积分形式）
# 伪代码修改：
# 将递归改为迭代（使用throughout）


- 路径追踪



# - 最简单的实现？

# 引出很多问题（如采样方向的选择等），进行简化实现





** DONE 最小实现

# - 场景中增加平面，构成类似于conner box的场景

- 场景中增加平面和球和一个矩形光源，构成类似于conner box的场景

  - Geometry的快速学习

  显式、隐式

  geometry的几种表达方式


  构造球的geometry:
  why?
  场景中要增加一个球


  面分解法
  经纬度法



    - for compute shader
# ray intersect with triangle mesh:
# refer to https://www.bilibili.com/video/BV1X7411F744?p=13 -> 38:44

add instanceIndex, primitiveIndex


    # - for ray tracing pipeline

  - 加入矩形光源




运行结果，显示场景！



- 半球面随机方向生成


任务：演示实例


- 用Lambertian模型实现BRDF和LambertianBRDF材质加入

refer to:
https://zhuanlan.zhihu.com/p/166154814




# 场景中增加平面，构成类似于conner box的场景


- 实现路径追踪


给出运行效果


优化：当bb >= ?时，再使用rr
（进行运行测试，比较一开始就使用rr或者当bb>=0或1或2或3时，有什么区别！最后选择1？）



# - 一个像素的颜色计算



优化：少计算一次bounce(compute direct light)

参考下面的.rgen:
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#pragma shader_stage(raygen)

#include "../common/camera.glsl"
#include "random.glsl"
#include "raycommon.glsl"

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(std140, set = 0, binding = 1) buffer PixelBuffer { vec4 pixels[]; }
pixelBuffer;

layout(std140, set = 0, binding = 2) uniform CommonData {
  uint sampleCount;
  uint totalSampleCount;
  uint pad_0;
  uint pad_1;
}
pushC;

void main() {
  const ivec2 ipos = ivec2(gl_LaunchIDEXT.xy);
  const ivec2 resolution = ivec2(gl_LaunchSizeEXT.xy);

  const uint sampleCount = pushC.sampleCount;
  const uint totalSampleCount = pushC.totalSampleCount;

  const uint bounceCount = 5;

  prd.seed = tea(tea(ipos.x, ipos.y), totalSampleCount);

  const uint cullMask = 0xFF;
  vec3 pixelColor = vec3(0.0);

  const vec2 offset = vec2(0.0);
  // const vec2 pixel = vec2(ipos.x, ipos.y);
  const vec2 pixel = vec2(ipos.x + rnd(prd.seed), ipos.y + rnd(prd.seed));
  const vec2 uv = (pixel / gl_LaunchSizeEXT.xy) * 2.0 - 1.0;

  vec4 firstOrigin = uCamera.viewInverse * vec4(offset, 0, 1);
  vec4 firstTarget = uCamera.projectionInverse * (vec4(uv.x, uv.y, 1, 1));
  vec4 firstDirection =
      normalize(uCamera.viewInverse *
                vec4(normalize(firstTarget.xyz * 1.0 - vec3(offset, 0)), 0));

  // prd.throughput = vec3(1.0);
  // prd.bias = vec3(0.0);
  // prd.t = -1.0;

  // TODO fix:use another .rchit(handle direct light; set V,worldNormal, shading
  // data to prd;)
  traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, cullMask, 0, 0, 0,
              firstOrigin.xyz, uCamera.near, firstDirection.xyz, uCamera.far,
              0);

  vec3 directRadiance = prd.radiance;

  const float t = prd.t;
  if (t < 0.0) {
    pixelColor += directRadiance * sampleCount;
  } else {
    for (uint ss = 0; ss < sampleCount; ++ss) {
      /*TODO fix: use prd data(V, worldNormal, shading data) to compute t,scatterDirection,throughput,bias

      vec3 bsdfDir = sample_(prd.seed, prd.V, data.worldNormal, EPSILON,
                             shading, isBRDFDir);

      computeIndirectLight(seed, EPSILON, data.V, bsdfDir, data.worldNormal,
                           shading, isBRDFDir, throughput, t);

      vec3 bias = 0.001 * (shading.isFromOutside ? data.worldNormal
                                                 : -data.worldNormal);
      if (isBRDFDir) {
        prd.bias = bias;
      } else {
        prd.bias = -bias;
      }
      */

      vec4 origin = firstOrigin + prd.t * firstDirection + vec4(prd.bias, 0.0);
      vec4 direction = vec4(prd.scatterDirection, 0.0);




      vec3 radiance = directRadiance;

      for (uint bb = 1; bb < bounceCount; ++bb) {
        prd.bias = vec3(0.0);
        prd.t = -1.0;

        traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, cullMask, 0, 0, 0,
                    origin.xyz, uCamera.near, direction.xyz, uCamera.far, 0);

        radiance += prd.radiance;

        // abort if the ray is either invalid or didn't hit anything
        const float t = prd.t;
        if (t < 0.0)
          break;

        // move the ray based on the bsdf direction
        origin = origin + t * direction + vec4(prd.bias, 0.0);
        direction = vec4(prd.scatterDirection, 0.0);
      };

      pixelColor += radiance;
    };
  }

  // move the ray based on the bsdf direction
  // origin = origin + t * direction + vec4(prd.bias, 0.0);
  // direction = vec4(prd.scatterDirection, 0.0);

  pixelColor = max(vec3(0), pixelColor);

  const uint pixelIndex = ipos.y * resolution.x + ipos.x;

  pixelBuffer.pixels[pixelIndex] = vec4(pixelColor, 1.0);
}









# - 加上fly相机？






** TODO 进一步完善





# - 场景中增加平面和球，构成类似于conner box的场景


# - 暂停:

# 研究lecture 16, 看矩形光如何实现（直接替换dw和da！）




- 直接光源采样数学推导


路径追踪面积积分形式推导

直接光源采样推导

- 直接光源采样伪代码和实现代码

- 完美光滑表面的高光反射实现和SpecularBRDF材质加入


- 直接光源采样修改
need handle specular reflection



- 用微面元模型实现BRDF

refer to:
https://zhuanlan.zhihu.com/p/187569004


- MicrofacetBRDF材质加入


- 通用的Metallic-Roughness BRDF材质加入

refer to:
https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-b-brdf-implementation
https://airguanz.github.io/2019/02/20/disney-brdf.html



** 更多功能加入

- 处理单面/双面

handle normal

handle intersect with triangle:
    compute shader:
    refer to 
    https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-rendering-a-triangle/single-vs-double-sided-triangle-backface-culling

    ray tracing pipeline:
    use GPURayTracingAccelerationInstanceUsage-TRIANGLE_CULL_DISABLE,TRIANGLE_FRONT_COUNTERCLOCKWISE ?
    refer to
    https://github.com/maierfelix/dawn-ray-tracing/blob/master/RT_SPEC.md#gpuraytracingaccelerationinstanceusage



- 模型加载
gltf



# - 纹理基础介绍
# srgb, linear space
# texture array

- 法线纹理加入
tbn
handle double side
- 其余纹理加入
diffuse, ...

- Gamma矫正


- Tone Mapping




** 更多的光源加入

- (暂停，复习pbrt、wonder.js中关于多重重要性采样和多光源的实现、直接光源采样！为什么需要基于面积的积分形式？)




- 减小方差：多重重要性采样
提出问题：
使用MIS前: 大矩形、小矩形、perfect/gloss specular reflection 渲染效果

理论

实现


比较:
使用MIS前的效果
使用MIS后的效果


- 多个矩形光源加入
- 多个方向光加入
- 多个点光源加入


- 纹理基础介绍
srgb, linear space
texture array

- 1个无限远的面积光加入









* DONE provide ppt for lesson1

* DONE 上传试听课程合集到B站(lesson1)

* TODO provide ppt, code for lesson2,3,4